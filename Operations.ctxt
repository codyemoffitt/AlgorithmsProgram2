#BlueJ class context
comment0.params=eval\ poly
comment0.target=Complex\ naiveEvaluation(Complex,\ Polynomial)
comment0.text=\r\n\ Static\ method\ to\ naively\ evaluate\ a\ polynomial\ with\ a\ certain\ x(eval)\r\n\ @param\ eval\ Complex\ number\ to\ use\ for\ x\ in\ the\ polynomial\r\n\ @param\ poly\ The\ polynomial\ to\ evaluate\r\n\ @return\ The\ result\ of\ evaluation\ as\ a\ complex\ number\r\n
comment1.params=eval\ poly
comment1.target=Complex\ naiveEvaluationBySquares(Complex,\ Polynomial)
comment1.text=\r\n\ Static\ method\ to\ naively\ evaluate\ a\ polynomial\ with\ a\ certain\ x(eval).\ Uses\ exponentiation\ by\ squaring\r\n\ @param\ eval\ Complex\ number\ to\ use\ for\ x\ in\ the\ polynomial\r\n\ @param\ poly\ The\ polynomial\ to\ evaluate\r\n\ @return\ The\ result\ of\ evaluation\ as\ a\ complex\ number\r\n
comment2.params=a\ toDegree
comment2.target=Complex\ pow(Complex,\ int)
comment2.text=\r\n\ Static\ method\ to\ get\ the\ value\ of\ a\ complex\ number\ if\ raised\ to\ a\ power\r\n\ @param\ a\ The\ complex\ number\r\n\ @param\ toDegree\ The\ degree\ to\ raise\ it\ to\r\n\ @return\ a^(toDegree)\r\n
comment3.params=a\ toDegree
comment3.target=Complex\ powBySquares(Complex,\ int)
comment3.text=\r\n\ Static\ method\ to\ get\ the\ value\ of\ a\ complex\ number\ if\ raised\ to\ a\ power.\ Uses\ exponentiation\ by\ squares.\r\n\ @param\ a\ The\ complex\ number\r\n\ @param\ toDegree\ The\ degree\ to\ raise\ it\ to\r\n\ @return\ a^(toDegree)\r\n
comment4.params=eval\ poly
comment4.target=Complex\ hornersEvaluation(Complex,\ Polynomial)
comment4.text=\r\n\ Static\ method\ to\ evaluate\ a\ polynomial\ with\ a\ certain\ x(eval).\ Uses\ Horner's\ algorithm.\r\n\ @param\ eval\ Complex\ number\ to\ use\ for\ x\ in\ the\ polynomial\r\n\ @param\ poly\ The\ polynomial\ to\ evaluate\r\n\ @return\ The\ result\ of\ evaluation\ as\ a\ complex\ number\r\n
comment5.params=n
comment5.target=Complex[]\ rootsOfUnity(int)
comment5.text=\r\n\ Static\ method\ to\ get\ the\ nth\ roots\ of\ unity\ for\ a\ certain\ n\r\n\ @param\ n\ The\ n\ to\ get\ the\ nth\ roots\ of\ unity\ of\r\n\ @return\ results\ An\ array\ of\ Complex\ numbers,\ with\ all\ the\ nth\ roots\ of\ unity\ for\ that\ n\r\n
comment6.params=poly
comment6.target=Complex[]\ fftStart(Polynomial)
comment6.text=\r\n\ Static\ method\ to\ evaluate\ a\ polynomial\ at\ all\ its\ nth\ roots\ of\ unity\ using\ Fast\ Fourier\ Transform.\ \r\n\ This\ one\ calls\ the\ actual\ method,\ giving\ it\ the\ right\ parameters,\ and\ error\ checking.\r\n\ The\ polynomial\ must\ have\ a\ number\ of\ terms\ that\ is\ a\ power\ of\ 2.\ \r\n\ @param\ poly\ The\ polynomial\ to\ evaluate\r\n\ @return\ The\ result\ of\ the\ evaluations\ as\ an\ array\ of\ Complex\ numbers\r\n
comment7.params=n\ terms
comment7.target=Complex[]\ fft(int,\ Complex[])
comment7.text=\r\n\ Static\ method\ to\ naively\ evaluate\ a\ polynomial\ at\ all\ its\ nth\ roots\ of\ unity\ using\ Fast\ Fourier\ Transform.\ \r\n\ This\ one\ calls\ the\ actual\ method,\ giving\ it\ the\ right\ parameters,\ and\ error\ checking.\r\n\ The\ polynomial\ must\ have\ a\ number\ of\ terms\ that\ is\ a\ power\ of\ 2.\ \r\n\ This\ function\ is\ recursive\r\n\ @param\ n\ The\ n\ to\ get\ the\ nth\ roots\ of\ unity\ of,\ also\ the\ number\ of\ coefficient\ terms\r\n\ @param\ terms\ An\ array\ of\ Complex\ numbers\ with\ all\ of\ the\ polynomial\ to\ evaulate's\ terms\r\n\ @return\ The\ result\ of\ the\ evaluations\ as\ an\ array\ of\ Complex\ numbers\r\n
comment8.params=alg\ poly
comment8.target=long\ measureTimeOfAlgPrint(int,\ Polynomial)
comment8.text=\r\n\ Method\ to\ print\ the\ amount\ of\ time,\ results,\ and\ number\ of\ Complex\ number\ multiplications\ for\ a\ given\ algorithm\ and\ polynomial.\r\n\ @param\ alg\ The\ algorith\ to\ use.\ 1\ is\ naive,\ 2\ is\ naive\ by\ squaring,\ 3\ is\ Horner's,\ 4\ is\ FFT\r\n\ @param\ poly\ The\ polynomial\ to\ evaluate\r\n\ @return\ The\ amount\ of\ time\ it\ took\ the\ algorithm\ to\ execute\ in\ nanoseconds\r\n
comment9.params=alg\ nForRoots
comment9.target=long\ measureTimeOfAlg(int,\ int)
comment9.text=\r\n\ Method\ to\ measure\ time\ and\ number\ of\ multiplications\ for\ a\ certain\ algorithm.\ \r\n\ Evaluates\ random\ polynomials\ at\ all\ nth\ roots\ of\ unity.\r\n\ Does\ not\ print\ info\ to\ screen.\r\n\ @param\ alg\ The\ algorith\ to\ use.\ 1\ is\ naive,\ 2\ is\ naive\ by\ squaring,\ 3\ is\ Horner's,\ 4\ is\ FFT\r\n\ @param\ nForRoots\ The\ n\ to\ use\ when\ getting\ the\ nth\ roots\ of\ unity\r\n\ @return\ The\ amount\ of\ time\ it\ took\ the\ algorithm\ to\ execute\ in\ nanoseconds\r\n
numComments=10
